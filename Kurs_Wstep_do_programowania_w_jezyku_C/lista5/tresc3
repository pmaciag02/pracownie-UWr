Rozkłady "losowo" generowanych liczb
W komputerze liczby losowe są najczęściej dość przewidywalne i generowane deterministycznie. Często ważniejsze jest aby rozkład ich w określonym zbiorze był w miarę jednorodny. Rozważmy fukcję i->f(i) działającą tak, że liczbę i zapisujemy w bazie B (czyli systemie binarnym, trójkowym, dziesiętnym czy jakimkolwiek innym) używając L cyfr (uzupełnione z przodu zerami), a następnie odwracamy kolejność cyfr i w tej reprezentacji otrzymamy liczbę f(i) np.dla B=2 i L=4 mamy f(1)=8 (dziesiętnie, bo 1 reprezentujemy jako 0001 i po odwróceniu mamy 1000). Inny przykład dla B=3 i L=3 mamy f(2)=18 (dziesiętnie, bo 2 reprezentujemy jako 002 i po odwróceniu mamy 200). W ten sposób mamy ciąg liczb dla i=0,1, ... ,M-1, gdzie M=B^L.

Celem programu jest prezentacja rozkładu opisanego powyżej ciągu i porównanie go z ciągiem liczb zwracanych przez standartową funkcje rand(), którą inicjalizujemy ziarnem zero (funkcja srand()).

Specyfikacja

Na wejściu mamy w wierszu oddzielone spacjami trzy liczby B L N lub dwie liczby B L (wtedy wyliczamy wartość N=B^L). B opisuje bazę jak powyżej, a L ilość cyfr.

Program powinien wypisać 2N+1 wierszy, a dokładniej dwa kwadraty w postaci: N wierszy po N znaków każdy, oddzielone pustym wierszem. Pierwszy kwadrat opisuje rozkład powyżej opisanego ciągu, a drugi rozkład kolejnych liczb zwracanych przez funkcję rand(). W i-tym wierszu kwadaratu mamy same znaki '.' poza znakiem 'X' na miejscu f(i%M)%N w pierwszym kwadracie i na miejscu rand()%N w drugim.

Uwaga: Drugie kwadraty przykładowych poniższych danych mogą być inne dla innej implementacji standardowej funkcji rand() np. w kompilatorze MS Visual C. Przykłady są poprawne dla sprawdzaczki i standardowych bibliotek kompilatorów gcc i clang.

Przykład danych 1:

2 3 8 
Wynik 1:

X.......
....X...
..X.....
......X.
.X......
.....X..
...X....
.......X

.......X
......X.
.X......
...X....
.X......
.......X
..X.....
....X... 
Przykład danych 2:

3 3 28
Wynik 2:

X...........................
.........X..................
..................X.........
...X........................
............X...............
.....................X......
......X.....................
...............X............
........................X...
.X..........................
..........X.................
...................X........
....X.......................
.............X..............
......................X.....
.......X....................
................X...........
.........................X..
..X.........................
...........X................
....................X.......
.....X......................
..............X.............
.......................X....
........X...................
.................X..........
..........................X.
X...........................

...............X............
..................X.........
.........X..................
...................X........
.X..........................
...X........................
..........X.................
................X...........
.X..........................
.................X..........
..X.........................
...................X........
......X.....................
...........X................
...........................X
..............X.............
........................X...
......................X.....
................X...........
................X...........
...X........................
X...........................
...................X........
.........X..................
..X.........................
..........................X.
..........................X.
...........................X
