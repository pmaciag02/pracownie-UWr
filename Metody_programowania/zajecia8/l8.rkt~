#lang racket


;zad.1.

(define (mreverse! xs)
  ;; iter reprezentuje odwrÃ³cony prefiks oryginalnej listy
  ;; head reprezentuje sufiks oryginalnej listy
  (define (aux iter head)
    (if (null? head)
        iter
        (let ((h (mcdr head)))
          (begin
            (set-mcdr! head iter)
            (aux head h)))))
  (aux null xs))


;zad.2.

;(provide
; mqueue?
; nonempty-mqueue/c
 ;(contract-out
  ;[mqueue-empty? (-> mqueue? boolean?)]
  ;[mqueue-make   (-> mqueue?)]
  ;[mqueue-pushb   (-> mqueue? any/c any/c)]
  ;[mqueue-pop    (-> nonempty-mqueue/c any/c)]
  ;[mqueue-peekf   (-> nonempty-mqueue/c any/c)]
  ;[mqueue-join   (-> nonempty-mqueue/c nonempty-mqueue/c any/c)]))

(struct lista (v [prev #:mutable] [next #:mutable]))

(define (insert-after p1 p2)
  (define p3 (mcdr p1))
  (set-mcdr! p2 p3)
  (set-mcdr! p1 p2))

(struct mqueue
  ([front #:mutable] [back #:mutable]))

(define (mqueue-empty? q)
  (or (null? (mqueue-front q)) (null? (mqueue-back q))))

(define nonempty-mqueue/c
  (and/c mqueue? (not/c mqueue-empty?)))

(define (mqueue-make)
  (mqueue null null))

(define (mqueue-pushb q x)
  (define p (lista x null null))
  (if (mqueue-empty? q)
      (begin
      (set-mqueue-front! q p)
      (set-mqueue-back! q p))
      (set-lista-next! (mqueue-back q) p))
  (set-mqueue-back! q p))

;(define (mqueue-pushf q x)
 ; (define p (mcons null x))
  ;(if (mqueue-empty? q)
   ;   (set-mqueue-front! q p)
    ;  (set-mcdr! (mqueue-back q) p))
  ;(set-mqueue-back! q p))

(define/contract (mqueue-pop q)
  (-> nonempty-mqueue/c any/c)
  (define p (mqueue-front q))
  (set-mqueue-front! q (mcdr p))
  (mcar p))

(define (mqueue-peekf q)
  (lista-v (mqueue-front q)))

(define (mqueue-peekb q)
  (lista-v (mqueue-back q)))

(define (mqueue-join q1 q2)
  (set-mcdr! (mqueue-back q1) (mqueue-front q2))
  (set-mqueue-back! q1 (mqueue-back q2))
  (set-mqueue-front! q2 null))



(define q (mqueue-make))
(mqueue-pushb q 1)
(mqueue-pushb q 2)
(mqueue-pushb q 3)
(mqueue-empty? q)
(mqueue-peekf q)
(mqueue-peekb q)